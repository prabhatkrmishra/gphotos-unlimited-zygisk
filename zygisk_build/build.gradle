plugins {
    id 'com.android.library'
}

android {
    namespace = 'cuynu.pixelify.photos'
    compileSdk = 36

    defaultConfig {
        minSdk = 21
        targetSdk = 36
        versionCode = 1
        versionName = "1.0"

        ndk {
            //noinspection ChromeOsAbiSupport
            abiFilters "arm64-v8a", "armeabi-v7a"
        }
    }
    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=Release",
                            "-DMODULE_NAME:STRING=PixelifyPhotos"
                }
            }
        }

        debug {
            debuggable true
            jniDebuggable = true

            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=Debug",
                            "-DMODULE_NAME:STRING=PixelifyPhotos"
                }
            }
        }
    }
    buildFeatures {
        prefab = false
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    ndkVersion '28.2.13676358'
}

tasks.register("copyZygiskSo", Copy) {
    def rootOut = "$rootDir/out"
    def rootZip = "$rootDir/zip/zygisk"

    def filesToCopy = [
            file("$rootOut/arm64-v8a/arm64-v8a.so"),
			file("$rootOut/armeabi-v7a/armeabi-v7a.so"),
    ]

    doFirst {
        def zipDir = file(rootZip)
        if (!zipDir.exists()) {
            println "Creating missing directory: $zipDir"
            zipDir.mkdirs()
        }

        filesToCopy.each { srcFile ->
            if (!srcFile.exists()) {
                throw new GradleException("Missing .so file: $srcFile")
            } else {
                println "Will copy: $srcFile â†’ $rootZip/"
            }
        }
    }

    from(filesToCopy)
    into(rootZip)
}

tasks.named("clean").configure {
    description = "Clean the Zygisk native libraries"
    doLast {
        // Delete the 'out' directory in the root folder
        def outDir = file("$rootDir/out")
        if (outDir.exists()) {
            println "Deleting $outDir"
            outDir.deleteDir()
        }

        // Delete all .so files under zip/zygisk/
        def soFiles = fileTree(dir: "$rootDir/module/zygisk", include: "*.so")
        soFiles.each { file ->
            println "Deleting: $file"
            file.delete()
        }
    }
}
